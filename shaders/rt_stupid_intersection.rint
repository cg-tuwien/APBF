#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_gpu_shader_int64 : require
#include "cpu_gpu_shared_config.h"

hitAttributeEXT vec3 HitAttribute;

struct aligned_aabb
{
	vec3 mMinBounds;
	vec3 mMaxBounds;
	vec2 _align;
};

#if BLAS_CENTRIC
// -------------------- aabb data ---------------------
layout(set = 1, binding = 1) buffer Aabbs
{
	aligned_aabb mAabbs[];
} aabbsBuffer;
// ----------------------------------------------------
#else 
// ----------------- instance data --------------------
struct VkAccelerationStructureInstanceKHR {
    mat3x4          transform;
    int             instanceCustomIndex_and_mask;
    int             instanceShaderBindingTableRecordOffset_and_flags;
    uint64_t        accelerationStructureReference;
};

layout(set = 1, binding = 1) buffer Instances
{
	VkAccelerationStructureInstanceKHR mInstances[];
} geometryInstances;
// ----------------------------------------------------
#endif

struct Sphere
{
  vec3  center;
  float radius;
};

//layout(binding = 7, set = 1, scalar) buffer allSpheres_
//{
//  Sphere i[];
//}
//allSpheres;
//

struct Ray
{
  vec3 origin;
  vec3 direction;
};

// Ray-Sphere intersection
// http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/
float hitSphere(const Sphere s, const Ray r)
{
  vec3  oc           = r.origin - s.center;
  float a            = dot(r.direction, r.direction);
  float b            = 2.0 * dot(oc, r.direction);
  float c            = dot(oc, oc) - s.radius * s.radius;
  float discriminant = b * b - 4 * a * c;
  if(discriminant < 0)
  {
    return -1.0;
  }
  else
  {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}


// Ray-AABB intersection
float hitAabb(const aligned_aabb aabb, const Ray r)
{
  vec3  invDir  = 1.0 / r.direction;
  vec3  t0      = invDir * (aabb.mMinBounds - r.origin);
  vec3  t1      = invDir * (aabb.mMaxBounds - r.origin);
  vec3  tmin    = min(t0, t1);
  vec3  tmax    = max(t0, t1);
  float maxcomp = max(tmin.x, max(tmin.y, tmin.z));
  float mincomp = min(tmax.x, min(tmax.y, tmax.z));
  return maxcomp > mincomp ? maxcomp : -1.0;
}

#define KIND_SPHERE 0
#define KIND_CUBE 1

void main()
{
  Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;

//  // Sphere data
//  Sphere sphere = allSpheres.i[gl_PrimitiveID];
//
  float tHit    = -1;
//  int   hitKind = gl_PrimitiveID % 2 == 0 ? KIND_SPHERE : KIND_CUBE;
//  if(hitKind == KIND_SPHERE)
//  {
//    // Sphere intersection
//    tHit = hitSphere(sphere, ray);
//  }
//  else
//  {
    // AABB intersection

#if BLAS_CENTRIC
    aligned_aabb aabb	= aabbsBuffer.mAabbs[gl_PrimitiveID];
    tHit				= hitAabb(aabb, ray);
//  }

  // Report hit point
  if(tHit > 0) {
    reportIntersectionEXT(tHit, 0);
  }
#else 
  mat3x4 tM = geometryInstances.mInstances[gl_InstanceCustomIndexEXT].transform;
  Sphere s;
  s.center = vec3(tM[0][3], tM[1][3], tM[2][3]);
  s.radius = tM[0][0] / float(RTX_NEIGHBORHOOD_RADIUS_FACTOR);

  tHit = hitSphere(s, ray);
  if (tHit > 0) {
    reportIntersectionEXT(1.0, 0);
  }
#endif
}