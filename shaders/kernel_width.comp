#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList      { uint         inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition       { ivec4         inPosition[]; };
layout(set =  2, binding = 0) buffer InRadius         { float           inRadius[]; };
layout(set =  3, binding = 0) buffer InTargetRadius   { float     inTargetRadius[]; };
layout(set =  4, binding = 0) buffer InOldKernelWidth { float   inOldKernelWidth[]; };
layout(set =  5, binding = 0) buffer InOutKernelWidth { uint    inOutKernelWidth[]; };
layout(set =  6, binding = 0) buffer InNeighbors      { uvec2        inNeighbors[]; };
layout(set =  7, binding = 0) buffer OutNeighbors     { uvec2       outNeighbors[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  8, binding = 0) buffer InNeighborsLength    { uint inNeighborsLength; };
layout(set =  9, binding = 0) buffer InOutNeighborsLength { uint inOutNeighborsLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set = 10, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idx              = inIndexList[n[0]];
	uint  idxN             = inIndexList[n[1]];
	ivec3 pos              = inPosition[idx ].xyz;
	ivec3 posN             = inPosition[idxN].xyz;
	float radius           = inRadius[idx];
	float targetRadius     = inTargetRadius[n[0]];
	float oldKernelWidth   = inOldKernelWidth[n[0]];
	vec3  diff             = vec3(posN - pos) / POS_RESOLUTION;
	float dist             = length(diff);

	if (!bool(apbfSettings.mBaseKernelWidthOnTargetRadius)) targetRadius = 0;

	float originalKernelWidth = max(radius, targetRadius) * KERNEL_SCALE;
	float neighborhoodCutoff  = max(originalKernelWidth, oldKernelWidth);

	// spread original kernel width to neighbor
	float distanceFromKernel = dist - originalKernelWidth;
	float influence = max(0, 1 - max(0, distanceFromKernel / (originalKernelWidth * KERNEL_SPREADING_FACTOR)));
	atomicMax(inOutKernelWidth[n[1]], uint(originalKernelWidth * influence * KERNEL_WIDTH_RESOLUTION));

	// reduce neighborhood to only lie within the old/original kernel width
	// => neighborhood is based on old kernel width, but incompressibility computations
	// will be based on new kernel width; hopefully, this mismatch won't matter much
	if (dist <= neighborhoodCutoff) {
		uint nId = atomicAdd(inOutNeighborsLength, 1u);
		outNeighbors[nId] = n;
	}
}
