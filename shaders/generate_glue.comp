#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList     { uint     inIndexList[]; };
layout(set =  1, binding = 0) buffer InNeighbors     { uvec2    inNeighbors[]; };
layout(set =  2, binding = 0) buffer InPosition      { ivec4     inPosition[]; };
layout(set =  3, binding = 0) buffer InRadius        { float       inRadius[]; };
layout(set =  4, binding = 0) buffer OutGlueIndex0   { uint   outGlueIndex0[]; };
layout(set =  5, binding = 0) buffer OutGlueIndex1   { uint   outGlueIndex1[]; };
layout(set =  6, binding = 0) buffer OutGlueDistance { uint outGlueDistance[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  7, binding = 0) buffer InNeighborsLength { uint inNeighborsLength; };
layout(set =  8, binding = 0) buffer InOutGlueLength   { uint inOutGlueLength; };
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idx     = inIndexList[n[0]];
	uint  idxN    = inIndexList[n[1]];
	ivec3 pos     = inPosition[idx ].xyz;
	ivec3 posN    = inPosition[idxN].xyz;
	float radius  = inRadius[idx ];
	float radiusN = inRadius[idxN];
	vec3  diff    = vec3(posN - pos) / POS_RESOLUTION;
	float dist    = length(diff);
	float gap     = dist - radius - radiusN;

	if (radiusN > radius || (radiusN == radius && idx >= idxN)) return;

	if (gap > 2 * radius) return;

	uint i = atomicAdd(inOutGlueLength, 1u);
	outGlueIndex0  [i] = idx;
	outGlueIndex1  [i] = idxN;
	outGlueDistance[i] = dist * POS_RESOLUTION;
}
