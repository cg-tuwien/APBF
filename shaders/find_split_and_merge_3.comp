#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList         { uint          inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition          { ivec4          inPosition[]; };
layout(set =  2, binding = 0) buffer InRadius            { float            inRadius[]; };
layout(set =  3, binding = 0) buffer InBoundariness      { float      inBoundariness[]; };
layout(set =  4, binding = 0) buffer InUintBoundariness  { uvec2  inUintBoundariness[]; };
layout(set =  5, binding = 0) buffer InOutBoundaryDist   { uint    inOutBoundaryDist[]; };
layout(set =  6, binding = 0) buffer OutTargetRadius     { float     outTargetRadius[]; };
layout(set =  7, binding = 0) buffer InNearestNeighbor   { uint    inNearestNeighbor[]; };
layout(set =  8, binding = 0) buffer OutTransferSource   { uint    outTransferSource[]; };
layout(set =  9, binding = 0) buffer OutTransferTarget   { uint    outTransferTarget[]; };
layout(set = 10, binding = 0) buffer OutTransferTimeLeft { float outTransferTimeLeft[]; };
layout(set = 11, binding = 0) buffer InOutTransferring   { uint    inOutTransferring[]; };
layout(set = 12, binding = 0) buffer OutSplit            { uint             outSplit[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set = 13, binding = 0) buffer InIndexListLength   { uint inIndexListLength; };
layout(set = 14, binding = 0) buffer InOutTransferLength { uint inOutTransferLength; };
layout(set = 15, binding = 0) buffer InOutSplitLength    { uint inOutSplitLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set = 16, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	uint mMaxTransferLength;
	uint mMaxSplitLength;
};
// ----------------------------------------------------

bvec3 smallestComponent(vec3 v)
{
	bool b1 = v.x <= v.y;
	bool b2 = v.x <= v.z;
	bool b3 = v.y <= v.z;
	return bvec3(b1 && b2, !b1 && b3, !b2 && !b3);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	uint  idx                  = inIndexList[id];
	ivec3 pos                  = inPosition[idx].xyz;
	float radius               = inRadius[idx];
	float boundaryDistance     = float(inOutBoundaryDist[id]) / POS_RESOLUTION;
	float boundariness         = inBoundariness[id];
	float neighborBoundariness = float(inUintBoundariness[id].x) / float(inUintBoundariness[id].y);
	
	uint  nearestNeighborId     = inNearestNeighbor[id];
	uint  nearestNeighborIdx    = inIndexList[nearestNeighborId];
	ivec3 nearestNeighborPos    = inPosition[nearestNeighborIdx].xyz;
	float nearestNeighborDist   = length(vec3(nearestNeighborPos - pos)) / POS_RESOLUTION;
	float nearestNeighborRadius = inRadius[nearestNeighborIdx];
	bool  nearestNeighborLarger = nearestNeighborRadius > radius || (nearestNeighborRadius == radius && nearestNeighborIdx > idx);
	
	// compute target radius using boundary distance

	// TODO remove (mGroundTruthBoundaryDistance was just for debugging)
	if (bool(apbfSettings.mGroundTruthBoundaryDistance)) {
		// hardcoded ground-truth for boundaryDistance for the pool scene:
		vec3 poolMin = vec3(-40, -10, -80);
		vec3 poolMax = vec3(40, 30, -40);
		vec3 posF = vec3(pos) / POS_RESOLUTION;
		vec3 toMin = posF - poolMin;
		vec3 toMax = poolMax - posF;
		boundaryDistance =     dot(toMin, vec3(smallestComponent(toMin)));
		boundaryDistance = min(dot(toMax, vec3(smallestComponent(toMax))), boundaryDistance);
	}
	// TODO remove: Ground Truth Boundariness
//	{
//		vec3  fluidCenter = vec3(0, 10, -60);
//		float fluidRadius = 100.0f;
//		vec3 posF = vec3(pos) / POS_RESOLUTION;
//		boundariness = fluidRadius - radius * 2.9f < distance(posF, fluidCenter) ? 1.0f : 0.0f;
//	}

	float targetRadius;
	if (bool(apbfSettings.mUpdateTargetRadius)) {
		if (bool(apbfSettings.mBaseKernelWidthOnBoundaryDistance)) {
			targetRadius = (apbfSettings.mTargetRadiusScaleFactor / (KERNEL_SCALE + KERNEL_SCALE * apbfSettings.mTargetRadiusScaleFactor)) * boundaryDistance;
			targetRadius = max(targetRadius, apbfSettings.mSmallestTargetRadius);
		} else {
			targetRadius = apbfSettings.mSmallestTargetRadius + max(0, (boundaryDistance - apbfSettings.mTargetRadiusOffset) * apbfSettings.mTargetRadiusScaleFactor);
		}
		outTargetRadius[id] = targetRadius;
	} else {
		targetRadius = outTargetRadius[id]; // TODO inOut
	}
	boundariness = (boundariness >= 1.0f && neighborBoundariness >= apbfSettings.mNeighborBoundarinessThreshold) ? 1.0f : 0.0f;
//	inOutBoundaryDist[id] = uint((boundaryDistance * (1.0f - boundariness) + radius) * POS_RESOLUTION); // boundary distance "decay"
	inOutBoundaryDist[id] = uint(mix(boundaryDistance, radius, boundariness) * POS_RESOLUTION);
//	inOutBoundaryDist[id] = uint(boundaryDistance * (1.0f - boundariness) * POS_RESOLUTION);
	inBoundariness[id]    = boundariness; // TODO rename inOutBoundariness or remove (no functionality, only for displaying filtered boundariness)


	// check if particle should merge or split using target radius
	// in case of merge, add directly to the transfers list
	// in case of split, add to outSplit; the particles in this list will later be duplicated and added to the transfers list

	bool split = bool(apbfSettings.mSplit) && (targetRadius * (pow(2.0, 1.0 / DIMENSIONS) * 0.99) <= radius);
	bool merge = bool(apbfSettings.mMerge) && nearestNeighborDist < radius && pow(radius, DIMENSIONS) + pow(nearestNeighborRadius, DIMENSIONS) <= pow(targetRadius, DIMENSIONS);
	if (!merge && !split) return;

	uint sourceIdx = (merge && nearestNeighborLarger) ? nearestNeighborIdx : idx;
	uint targetIdx = (merge && nearestNeighborLarger) ? idx : nearestNeighborIdx;
	if (atomicExchange(inOutTransferring[sourceIdx], 1u) == 1u) return;

	if (merge) {
		if (atomicExchange(inOutTransferring[targetIdx], 1u) == 1u) {
			inOutTransferring[sourceIdx] = 0u;
			return;
		}
		uint tIdx = atomicAdd(inOutTransferLength, 1u);
		if (tIdx >= mMaxTransferLength) {
			inOutTransferLength = mMaxTransferLength;
			inOutTransferring[sourceIdx] = 0u;
			inOutTransferring[targetIdx] = 0u;
			return;
		}
		outTransferSource  [tIdx] = sourceIdx;
		outTransferTarget  [tIdx] = targetIdx;
		outTransferTimeLeft[tIdx] = max(0.0001, apbfSettings.mMergeDuration); // 0 would be interpreted as a split
	} else {
		uint sIdx = atomicAdd(inOutSplitLength, 1u);
		if (sIdx >= mMaxSplitLength) {
			inOutSplitLength = mMaxSplitLength;
			inOutTransferring[sourceIdx] = 0u;
			return;
		}
		outSplit[sIdx] = idx;
	}
}
