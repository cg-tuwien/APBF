#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList  { uint       inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition   { ivec4       inPosition[]; };
layout(set =  2, binding = 0) buffer InRange      { float          inRange[]; };
layout(set =  3, binding = 0) buffer InCellStart  { uint       inCellStart[]; };
layout(set =  4, binding = 0) buffer InCellEnd    { uint         inCellEnd[]; };
layout(set =  5, binding = 0) buffer OutNeighbors { uvec2     outNeighbors[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  6, binding = 0) buffer InIndexListLength    { uint inIndexListLength; };
layout(set =  7, binding = 0) buffer InOutNeighborsLength { uint inOutNeighborsLength; };
// ----------------------------------------------------

// ------------------- gpu settings -------------------
layout(set =  8, binding = 0) uniform GpuSettings { gpu_settings gpuSettings; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	vec3 mMinPos;
	uint mResolutionLog2;
	vec3 mMaxPos;
	float mRangeScale;
};
// ----------------------------------------------------

#include "neighbor_add.glsl"

uvec3 map_pos_to_grid(vec3 pos) {
	return uvec3((pos - mMinPos) / (mMaxPos - mMinPos) * (1u << mResolutionLog2)) * uvec3(1u, DIMENSIONS > 1, DIMENSIONS > 2);
}

// z-curve
uint hash(uvec3 pos) {
	uint result = 0u;
	for (uint i = 0u; i < mResolutionLog2; i++) for (uint d = 0u; d < DIMENSIONS; d++)
	{
		result += ((pos[d] >> i) & 1u) << (i * DIMENSIONS + d);
	}
	return result;
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	neighborPairInit();

	float range   = inRange[id] * mRangeScale;
	uint  idx     = inIndexList[id];
	vec3  pos     = vec3(inPosition[idx].xyz) / POS_RESOLUTION;
	uvec3 gridMin = map_pos_to_grid(pos - range);
	uvec3 gridMax = map_pos_to_grid(pos + range);
	
	uvec3 cell      = gridMin;
	uint  h         = hash(cell);
	uint  cellStart = inCellStart[h];
	uint  cellEnd   = inCellEnd  [h];
	uint  idN       = cellStart;

	for (;; idN++) {
		while (idN >= cellEnd) {
			if (                                              ++cell.x > gridMax.x) cell.x = gridMin.x;
			if (                       cell.x == gridMin.x && ++cell.y > gridMax.y) cell.y = gridMin.y;
			if (cell.y == gridMin.y && cell.x == gridMin.x && ++cell.z > gridMax.z) return;
			
			h         = hash(cell);
			cellStart = inCellStart[h];
			cellEnd   = inCellEnd  [h];
			idN       = cellStart;
		}
		
		uint idxN = inIndexList[idN];
		vec3 posN = vec3(inPosition[idxN].xyz) / POS_RESOLUTION;
		if (id == idN || distance(pos, posN) > range) continue;

		addNeighborPair(id, idN);
	}
}
