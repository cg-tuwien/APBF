#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList         { uint          inIndexList[]; };
layout(set =  1, binding = 0) buffer InInverseMass       { float       inInverseMass[]; };
layout(set =  2, binding = 0) buffer InNeighbors         { uvec2         inNeighbors[]; };
layout(set =  3, binding = 0) buffer InScaledGradient    { vec4     inScaledGradient[]; };
layout(set =  4, binding = 0) buffer InLambda            { float            inLambda[]; };
layout(set =  5, binding = 0) buffer InOutPosition       { ivec4       inOutPosition[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  6, binding = 0) buffer InNeighborsLength { uint inNeighborsLength; };
// ----------------------------------------------------

void add_to_pos(uint particleId, ivec3 posShift)
{
	atomicAdd(inOutPosition[particleId].x, posShift.x);
	atomicAdd(inOutPosition[particleId].y, posShift.y);
	atomicAdd(inOutPosition[particleId].z, posShift.z);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idxN           = inIndexList[n[1]];
	float invMassN       = inInverseMass[idxN]; // TODO move multiplication with invMassN into incompressibility_1
	float lambda         = inLambda[n[0]];
	vec3  scaledGradient = inScaledGradient[id].xyz;

	// if the density is already lower than the rest density, do nothing
	if (lambda >= 0) return;

	// now we can shift the neighbor n[1] so that the density is decreased towards the rest density at the n[0] particle's position:
	add_to_pos(idxN, ivec3(scaledGradient * (lambda * sqrt(invMassN) * POS_RESOLUTION)));
}
