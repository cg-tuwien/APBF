#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

struct incomp_data {
	ivec3 mWeightedGradSum;
	uint  mDensity;
	uint  mSquaredGradSum;
	uint padding0;
	uint padding1;
	uint padding2;
};

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList           { uint            inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition            { ivec4            inPosition[]; };
layout(set =  2, binding = 0) buffer InRadius              { float              inRadius[]; };
layout(set =  3, binding = 0) buffer InInverseMass         { float         inInverseMass[]; };
layout(set =  4, binding = 0) buffer InKernelWidth         { float         inKernelWidth[]; };
layout(set =  5, binding = 0) buffer InNeighbors           { uvec2           inNeighbors[]; };
layout(set =  6, binding = 0) buffer InOutIncompData       { incomp_data inOutIncompData[]; };
layout(set =  7, binding = 0) buffer InOutCenterOfMassDiff { ivec4 inOutCenterOfMassDiff[]; };
layout(set =  8, binding = 0) buffer OutScaledGradient     { vec4      outScaledGradient[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  9, binding = 0) buffer InNeighborsLength { uint inNeighborsLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set = 10, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

#include "kernels.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idx              = inIndexList  [n[0]];
	uint  idxN             = inIndexList  [n[1]];
	ivec3 pos              = inPosition   [idx ].xyz;
	ivec3 posN             = inPosition   [idxN].xyz;
	float invMassN         = inInverseMass[idxN];
	float kernelWidth      = inKernelWidth[n[0]];
	vec3  diff             = vec3(posN - pos) / POS_RESOLUTION;
	vec3  gradient         = kernel_gradient(diff, kernelWidth);
	vec3  weightedGradient = gradient / invMassN;

	atomicAdd(inOutIncompData[n[0]].mDensity,          uint(kernel_height(diff, kernelWidth) / invMassN * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.x, int(                         weightedGradient.x * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.y, int(                         weightedGradient.y * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.z, int(                         weightedGradient.z * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mSquaredGradSum,   uint(         dot(gradient, gradient) / invMassN * INCOMPRESSIBILITY_DATA_RESOLUTION));
	outScaledGradient[id].xyz = gradient;

	if (apbfSettings.mBoundarinessCalculationMethod == 1) {
		ivec3 weightedDiff = ivec3((posN - pos) / (invMassN * kernelWidth));
		atomicAdd(inOutCenterOfMassDiff[n[0]].x, weightedDiff.x);
		atomicAdd(inOutCenterOfMassDiff[n[0]].y, weightedDiff.y);
		atomicAdd(inOutCenterOfMassDiff[n[0]].z, weightedDiff.z);
		atomicAdd(inOutCenterOfMassDiff[n[0]].w, int(INCOMPRESSIBILITY_DATA_RESOLUTION / invMassN));
	}
}
