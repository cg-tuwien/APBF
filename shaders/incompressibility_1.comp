#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

struct incomp_data {
	ivec3 mWeightedGradSum;
	uint  mDensity;
	uint  mSquaredGradSum;
	uint padding0;
	uint padding1;
	uint padding2;
};

// ---------------------- lists -----------------------
layout(set = 0, binding = 0) buffer InIndexList          { uint            inIndexList[]; };
layout(set = 0, binding = 1) buffer InPosition           { ivec4            inPosition[]; };
layout(set = 0, binding = 2) buffer InRadius             { float              inRadius[]; };
layout(set = 0, binding = 3) buffer InInverseMass        { float         inInverseMass[]; };
layout(set = 0, binding = 4) buffer InKernelWidth        { float         inKernelWidth[]; };
layout(set = 0, binding = 5) buffer InNeighbors          { uvec2           inNeighbors[]; };
layout(set = 0, binding = 6) buffer InOutIncompData      { incomp_data inOutIncompData[]; };
layout(set = 0, binding = 7) buffer OutScaledGradient    { vec4      outScaledGradient[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set = 1, binding = 0) buffer InNeighborsLength { uint inNeighborsLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set = 2, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

#include "kernels.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idx              = inIndexList[n[0]];
	uint  idxN             = inIndexList[n[1]];
	ivec3 pos              = inPosition[idx ].xyz;
	ivec3 posN             = inPosition[idxN].xyz;
	float radius           = inRadius[idx];
	float invMass          = inInverseMass[idx ];
	float invMassN         = inInverseMass[idxN];
	float kernelWidth      = inKernelWidth[n[0]];
	float invRestDensity   = pow(2 * radius, DIMENSIONS) * invMass;
	vec3  diff             = vec3(posN - pos) / POS_RESOLUTION;
	vec3  weightedGradient = kernel_gradient(diff, kernelWidth) * invRestDensity / invMassN;
	vec3  scaledGradient   = weightedGradient * sqrt(invMassN); // scale gradients by inverse mass so that moving lighter particles gets preferred

	atomicAdd(inOutIncompData[n[0]].mDensity,          uint(kernel_height(diff, kernelWidth) / invMassN * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.x, int(                         weightedGradient.x * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.y, int(                         weightedGradient.y * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mWeightedGradSum.z, int(                         weightedGradient.z * INCOMPRESSIBILITY_DATA_RESOLUTION));
	atomicAdd(inOutIncompData[n[0]].mSquaredGradSum,   uint(        dot(scaledGradient, scaledGradient) * INCOMPRESSIBILITY_DATA_RESOLUTION));
	outScaledGradient[id].xyz = scaledGradient;
}
