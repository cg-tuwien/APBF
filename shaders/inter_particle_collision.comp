#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList   { uint      inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition    { ivec4      inPosition[]; };
layout(set =  2, binding = 0) buffer InRadius      { float        inRadius[]; };
layout(set =  3, binding = 0) buffer InInverseMass { float   inInverseMass[]; };
layout(set =  4, binding = 0) buffer InNeighbors   { uvec2     inNeighbors[]; };
layout(set =  5, binding = 0) buffer InOutPosition { ivec4   inOutPosition[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  6, binding = 0) buffer InNeighborsLength { uint inNeighborsLength; };
// ----------------------------------------------------

void add_to_pos(uint particleId, ivec3 posShift)
{
	atomicAdd(inOutPosition[particleId].x, posShift.x);
	atomicAdd(inOutPosition[particleId].y, posShift.y);
	atomicAdd(inOutPosition[particleId].z, posShift.z);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inNeighborsLength) return;

	uvec2 n = inNeighbors[id];

	uint  idx              = inIndexList[n[0]];
	uint  idxN             = inIndexList[n[1]];
	ivec3 pos              = inPosition[idx ].xyz;
	ivec3 posN             = inPosition[idxN].xyz;
	float radius           = inRadius[idx];
	float radiusN          = inRadius[idxN];
	float invMass          = inInverseMass[idx ];
	float invMassN         = inInverseMass[idxN];
	
	// make sure constraint is only solved once per pair
	if (radiusN > radius || (radiusN == radius && idxN >= idx)) return;
	
	vec3  diff = vec3(posN - pos);
	float dist = length(diff);
	float constrEval = dist - (radius + radiusN) * POS_RESOLUTION;
	if (constrEval >= 0) return;
		
	float scalar = constrEval / (invMass + invMassN);

	add_to_pos(idx , ivec3(( invMass  * scalar / dist) * diff));
	add_to_pos(idxN, ivec3((-invMassN * scalar / dist) * diff));
}
