#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

struct neighbors
{
	uint mNeighbor[NEIGHBOR_LIST_MAX_LENGTH];
};

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList   { uint      inIndexList[]; };
layout(set =  1, binding = 0) buffer InOutPosition { ivec4   inOutPosition[]; };
layout(set =  2, binding = 0) buffer InRadius      { float        inRadius[]; };
layout(set =  3, binding = 0) buffer InInverseMass { float   inInverseMass[]; };
layout(set =  4, binding = 0) buffer InNeighbors   { neighbors inNeighbors[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  5, binding = 0) buffer InIndexListLength { uint inIndexListLength; };
// ----------------------------------------------------

void add_to_pos(uint particleId, ivec3 posShift)
{
	atomicAdd(inOutPosition[particleId].x, posShift.x);
	atomicAdd(inOutPosition[particleId].y, posShift.y);
	atomicAdd(inOutPosition[particleId].z, posShift.z);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	uint  idx           = inIndexList[id];
	ivec3 pos           = inOutPosition[idx].xyz;
	float radius        = inRadius[idx];
	float invMass       = inInverseMass[idx];
	uint  neighborCount = inNeighbors[id].mNeighbor[0];
	
	for (uint i = 1; i <= neighborCount; i++) {
		uint idxN = inNeighbors[id].mNeighbor[i];
		float radN = inRadius[idxN];
		// make sure constraint is only solved once per pair
		if (radN > radius || (radN == radius && idxN >= idx)) continue;
		
		ivec3 posN = inOutPosition[idxN].xyz;
		float invMassN = inInverseMass[idxN];
		vec3 diff = vec3(posN - pos);
		float dist = length(diff);
		float constrEval = dist - (radius + radN) * POS_RESOLUTION;
		if (constrEval >= 0) continue;
		
		float scalar = constrEval / (invMass + invMassN);

		add_to_pos(idx , ivec3(( invMass  * scalar / dist) * diff));
		add_to_pos(idxN, ivec3((-invMassN * scalar / dist) * diff));
	}
}
