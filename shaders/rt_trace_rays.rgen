#version 460
#extension GL_EXT_ray_tracing : require

layout(set = 0, binding = 0) uniform application_data
{
	/** Camera's view matrix */
	mat4 mViewMatrix;
	/** Camera's projection matrix */
	mat4 mProjMatrix;
	/** [0]: time since start, [1]: delta time, [2]: reset particle positions, [3]: set uniform particle radius  */
	vec4 mTimeAndUserInput;
	/** [0]: cullMask for traceRayEXT, [1]: neighborhood-origin particle-id, [2]: perform sphere intersection, [3]: unused  */
	uvec4 mUserInput;
} appData;

layout(set = 2, binding = 0, rgba8) uniform image2D image;
layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(location = 0) rayPayloadEXT vec3 hitValue;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

    vec2 d = inUV * 2.0 - 1.0;
    float aspectRatio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
	
    vec3 origin = vec3(0, 0, 0.0);
    vec3 direction = normalize(vec3(d.x * aspectRatio, d.y, sqrt(3))); // 1 => sqrt(3) is the scaling factor from a fov of 90 to 60
	vec4 p1 = vec4(origin, 1.0);
	vec4 p2 = vec4(origin + direction, 1.0);
	mat4 cameraTransform = inverse(appData.mViewMatrix);
	vec4 vp1 = cameraTransform * p1;
	vec4 vp2 = cameraTransform * p2;
	origin = vec3(vp1);
	direction = vec3(normalize(vp2 - vp1));
	
    uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT; // terminate on first hit is only okay because particles are shaded uniformly green
    uint cullMask = appData.mUserInput[0] & 0xFF;
    float tmin = 0.1;
    float tmax = 10000.0;
    traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, origin, tmin, direction, tmax, 0 /*payload*/);

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
}
