#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InSplit         { uint         inSplit[]; };
layout(set =  1, binding = 0) buffer OutTransferring { uint outTransferring[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  2, binding = 0) buffer InTransferLength { uint inTransferLength; };
layout(set =  3, binding = 0) buffer InParticleLength { uint inParticleLength; };
layout(set =  4, binding = 0) buffer InSplitLength    { uint inSplitLength; };
layout(set =  5, binding = 0) buffer OutSplitLength   { uint outSplitLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set =  6, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	uint mMaxTransferLength;
	uint mMaxParticleLength;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;

	// limit splits by available space in transfer list and hidden particle list
	uint newSplitLength = inSplitLength;
	newSplitLength = min(newSplitLength, mMaxTransferLength - inTransferLength);
	newSplitLength = min(newSplitLength, mMaxParticleLength - inParticleLength);
	if (id == 0) outSplitLength = newSplitLength;
	if (id >= inSplitLength) return;

	// removed splits are not transferring anymore
	if (id >= newSplitLength) {
		outTransferring[inSplit[id]] = 0u;
	}
}
