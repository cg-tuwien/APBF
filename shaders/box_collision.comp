#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList   { uint    inIndexList[]; };
layout(set =  1, binding = 0) buffer InOutPosition { ivec4 inOutPosition[]; };
layout(set =  2, binding = 0) buffer InRadius      { float      inRadius[]; };
layout(set =  3, binding = 0) buffer InBoxMin      { vec4       inBoxMin[]; };
layout(set =  4, binding = 0) buffer InBoxMax      { vec4       inBoxMax[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  5, binding = 0) buffer InIndexListLength { uint inIndexListLength; };
layout(set =  6, binding = 0) buffer InBoxesLength     { uint inBoxesLength; };
// ----------------------------------------------------

// From https://www.shadertoy.com/view/4djSRW (MIT License, see LICENSE in root directory)
vec3 hash31(float p)
{
   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));
   p3 += dot(p3, p3.yzx+33.33);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

bvec3 smallestComponent(vec3 v)
{
	bool b1 = v.x <= v.y;
	bool b2 = v.x <= v.z;
	bool b3 = v.y <= v.z;
	return bvec3(b1 && b2, !b1 && b3, !b2 && !b3);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	uint idx = inIndexList[id];
	vec3 pos = vec3(inOutPosition[idx].xyz) / POS_RESOLUTION;
	float radius = inRadius[idx];
	
	for (uint i = 0; i < inBoxesLength; i++) {
		vec3 bMin = inBoxMin[i].xyz - radius - hash31(id * pos.x - pos.y - pos.z) * 0.05;
		vec3 bMax = inBoxMax[i].xyz + radius + hash31(id * pos.y + pos.x + pos.z) * 0.05;

		vec3 toMin = bMin - pos;
		vec3 toMax = bMax - pos;
		toMin *= vec3(smallestComponent(-toMin));
		toMax *= vec3(smallestComponent( toMax));
		float distToMin = -dot(toMin, vec3(1, 1, 1));
		float distToMax =  dot(toMax, vec3(1, 1, 1));
		if (distToMin <= 0 || distToMax <= 0) continue;
		pos += distToMin < distToMax ? toMin : toMax;
	}

	inOutPosition[idx].xyz = ivec3(pos * POS_RESOLUTION);
}
