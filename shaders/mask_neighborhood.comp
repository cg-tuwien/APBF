#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_gpu_shader_int64 : require
//#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#include "cpu_gpu_shared_config.h"

// ---------------- application data ------------------
layout(set = 0, binding = 0) uniform application_data
{
	/** Camera's view matrix */
	mat4 mViewMatrix;
	/** Camera's projection matrix */
	mat4 mProjMatrix;
	/** [0]: time since start, [1]: delta time, [2]: reset particle positions, [3]: set uniform particle radius  */
	vec4 mTimeAndUserInput;
	/** [0]: cullMask for traceRayEXT, [1]: neighborhood-origin particle-id, [2]: perform sphere intersection, [3]: unused  */
	uvec4 mUserInput;
} appData;
// ----------------------------------------------------

// ------------------ particle data -------------------
struct particle {
	vec4 mOriginalPositionRand;
	vec4 mCurrentPositionRadius;
};

layout(set = 1, binding = 0) buffer Particles
{
	particle mParticles[];
} particlesBuffer;
// ----------------------------------------------------

#if BLAS_CENTRIC
// -------------------- aabb data ---------------------
struct aligned_aabb
{
	vec3 mMinBounds;
	vec3 mMaxBounds;
	vec2 _align;
};

layout(set = 1, binding = 1) buffer Aabbs
{
	aligned_aabb mAabbs[];
} aabbsBuffer;
// ----------------------------------------------------
#else
// ----------------- instance data --------------------
struct VkAccelerationStructureInstanceKHR {
    mat3x4          transform;
    int             instanceCustomIndex_and_mask;
    int             instanceShaderBindingTableRecordOffset_and_flags;
    uint64_t        accelerationStructureReference;
};

layout(set = 1, binding = 1) buffer Instances
{
	VkAccelerationStructureInstanceKHR mInstances[];
} geometryInstances;
// ----------------------------------------------------

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
#endif


// Apply 1-byte mask to the 8 high-bits of an integer, and return the resulting integer
int applyMask(int original, int mask) 
{
	return (original & 0xFFFFFF) | ((mask << 24) & 0xFF000000);
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;

	if (id < geometryInstances.mInstances.length()) {
		// Search neighbors for ALL particles, in order to test the performance; but only highlight the neighborhood of ONE
		int neighborhoodOriginParticleId = int(appData.mUserInput[1]);
		int instanceCustomIndex = geometryInstances.mInstances[id].instanceCustomIndex_and_mask & 0xFFFFFF;
		bool thisIsTheDroidWeAreLookingFor = neighborhoodOriginParticleId == instanceCustomIndex;

		// Get the position of this particle (it was set during the preceding roundandround.comp pass)
		vec3 particlePosition = vec3(
			geometryInstances.mInstances[id].transform[0][3],
			geometryInstances.mInstances[id].transform[1][3],
			geometryInstances.mInstances[id].transform[2][3]
		);

		// Mark the origin-particle:
		geometryInstances.mInstances[neighborhoodOriginParticleId].instanceCustomIndex_and_mask = applyMask(geometryInstances.mInstances[neighborhoodOriginParticleId].instanceCustomIndex_and_mask, ORIGIN_MASK);

#if RTX_NEIGHBORHOOD_RADIUS_FACTOR > 1
		// Create a Ray Query and search for all the neighbors with a "point-sized" ray
		rayQueryEXT rayQuery;
		vec3 rayOrigin = particlePosition;
		vec3 rayDirection = vec3(0, 0, 1);
		float tMin = 0.0;
		float tMax = 0.01;
		rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, rayOrigin, tMin, rayDirection, tMax);
		while(rayQueryProceedEXT(rayQuery)) {
			if (thisIsTheDroidWeAreLookingFor) {
				int neighborCustomIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);

				if (appData.mUserInput[2] == 1) { // => Sphere Intersection
					mat3x4 tM = geometryInstances.mInstances[neighborCustomIndex].transform;
					vec3 center = vec3(tM[0][3], tM[1][3], tM[2][3]);
					float radius = tM[0][0];
					if (distance(center, rayOrigin) <= radius) {
						geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask = applyMask(geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask, NEIGHBOR_MASK);
					}
				}

				else { // => AABB Intersection
					geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask = applyMask(geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask, NEIGHBOR_MASK);
				}
			}
		}
#else 
		// Different strategy: RTX_NEIGHBORHOOD_RADIUS_FACTOR does not artificially increase a point's size => search for neighbors with 9 rays
		vec3 rayOrigins[9] = {
			vec3(-0.3, -0.3, -0.3),
			vec3(-0.3,  0.0, -0.3),
			vec3(-0.3,  0.3, -0.3),
			vec3( 0.0, -0.3, -0.3),
			vec3( 0.0,  0.0, -0.3),
			vec3( 0.0,  0.3, -0.3),
			vec3( 0.3, -0.3, -0.3),
			vec3( 0.3,  0.0, -0.3),
			vec3( 0.3,  0.3, -0.3)
		};
		const vec3 rayDirection = vec3(0, 0, 1);
		const float tMin = 0.0;
		const float tMax = 0.6;
		for (int i=0; i < 9; ++i) {
			rayQueryEXT rayQuery;
			vec3 rayOrigin = particlePosition + rayOrigins[i];
			rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, rayOrigin, tMin, rayDirection, tMax);
			while(rayQueryProceedEXT(rayQuery)) {
				if (thisIsTheDroidWeAreLookingFor) {
					int neighborCustomIndex = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);

					if (appData.mUserInput[2] == 1) { // => Sphere Intersection
						mat3x4 tM = geometryInstances.mInstances[neighborCustomIndex].transform;
						vec3 center = vec3(tM[0][3], tM[1][3], tM[2][3]);
						float radius = tM[0][0];
						if (distance(center, rayOrigin) <= radius) {
							geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask = applyMask(geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask, NEIGHBOR_MASK);
						}
					}

					else { // => AABB Intersection
						geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask = applyMask(geometryInstances.mInstances[neighborCustomIndex].instanceCustomIndex_and_mask, NEIGHBOR_MASK);
					}
				}
			}
		}
#endif

	}
}
