#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InOutPosition         { ivec4         inOutPosition[]; };
layout(set =  1, binding = 0) buffer InOutRadius           { float           inOutRadius[]; };
layout(set =  2, binding = 0) buffer InOutInverseMass      { float      inOutInverseMass[]; };
layout(set =  3, binding = 0) buffer InOutVelocity         { vec4          inOutVelocity[]; };
layout(set =  4, binding = 0) buffer InOutTransferSource   { uint       inTransferSource[]; };
layout(set =  5, binding = 0) buffer InOutTransferTarget   { uint       inTransferTarget[]; };
layout(set =  6, binding = 0) buffer InOutTransferTimeLeft { float inOutTransferTimeLeft[]; };
layout(set =  7, binding = 0) buffer InOutTransferring     { uint     inOutTransferrring[]; };
layout(set =  8, binding = 0) buffer OutDeleteParticleList { uint  outDeleteParticleList[]; };  // index of the particle to delete
layout(set =  9, binding = 0) buffer OutDeleteTransferList { uint  outDeleteTransferList[]; };  // index of the transfer to delete
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set = 10, binding = 0) buffer InTransferTargetLength        { uint inTransferLength; };
layout(set = 11, binding = 0) buffer InOutDeleteParticleListLength { uint inOutDeleteParticleListLength; };
layout(set = 12, binding = 0) buffer InOutDeleteTransferListLength { uint inOutDeleteTransferListLength; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	float mDeltaTime;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inTransferLength) return;

	float ttl_and_type   = inOutTransferTimeLeft[id];
	float ttl            = max(mDeltaTime, abs(ttl_and_type));
	bool  merge          = ttl_and_type > 0;
	uint  idS            = inTransferSource[id];
	uint  idT            = inTransferTarget[id];
	ivec3 posS           = inOutPosition[idS].xyz;
	ivec3 posT           = inOutPosition[idT].xyz;
	float radiusS        = inOutRadius[idS];
	float radiusT        = inOutRadius[idT];
	float invMassS       = inOutInverseMass[idS];
	float invMassT       = inOutInverseMass[idT];
	vec3  velocityS      = inOutVelocity[idS].xyz;
	vec3  velocityT      = inOutVelocity[idT].xyz;
	float volS           = pow(radiusS, DIMENSIONS);
	float volT           = pow(radiusT, DIMENSIONS);
	float factorS        = merge ? min(1, mDeltaTime / ttl) : mDeltaTime * (volS - volT) / (2 * ttl * volS);
//	float transfMass     = factorS / invMassS;
	float transfVol      = factorS * volS;
	float normFactor     = 1.0 / (invMassS + factorS * invMassT);

	inOutInverseMass[idS]    =                                    invMassS / (1 - factorS);
//	inOutInverseMass[idS]    =                                    invMassS / (1 - invMassS * transfMass);
//	inOutInverseMass[idT]    = isinf(invMassT) ? 1 / transfMass : invMassT / (1 + invMassT * transfMass);
//	inOutInverseMass[idT]    =                                           1 / (1 / invMassT + transfMass);
	inOutInverseMass[idT]    =                         invMassS * invMassT * normFactor;
//	inOutRadius[idS]         = radiusS * pow(1 - factorS, 1.0 / DIMENSIONS);
	inOutRadius[idS]         = pow(volS - transfVol, 1.0 / DIMENSIONS);
	inOutRadius[idT]         = pow(volT + transfVol, 1.0 / DIMENSIONS);
//	inOutPosition[idT].xyz   = ivec3((invMassS *      posT + factorS * invMassT *      posS) * normFactor);
//	inOutVelocity[idT].xyz   = ivec3((invMassS * velocityT + factorS * invMassT * velocityS) * normFactor);
//	inOutPosition[idT].xyz   = ivec3(invMassS * normFactor *      posT + factorS * invMassT * normFactor *      posS); // rounding errors can break 2D version
//	inOutVelocity[idT].xyz   =       invMassS * normFactor * velocityT + factorS * invMassT * normFactor * velocityS;
//	inOutPosition[idT].xyz   =      posS + ivec3(invMassS * normFactor * (     posT -      posS)); // introduces erratic particle movement
	inOutVelocity[idT].xyz   = velocityS +       invMassS * normFactor * (velocityT - velocityS);

	inOutTransferTimeLeft[id] = (ttl - mDeltaTime) * (merge ? 1 : -1);

	if (ttl == mDeltaTime) {
		if (merge) {
			uint dplIdx = atomicAdd(inOutDeleteParticleListLength, 1u);
			outDeleteParticleList[dplIdx] = idS;
		} else {
			uint dtlIdx = atomicAdd(inOutDeleteTransferListLength, 1u);
			outDeleteTransferList[dtlIdx] = id;
		}
		inOutTransferrring[idS] = 0u;
		inOutTransferrring[idT] = 0u;
	}
}
