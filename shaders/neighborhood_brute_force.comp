#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList  { uint       inIndexList[]; };
layout(set =  1, binding = 0) buffer InPosition   { ivec4       inPosition[]; };
layout(set =  2, binding = 0) buffer InRange      { float          inRange[]; };
layout(set =  3, binding = 0) buffer OutNeighbors { uvec2     outNeighbors[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  4, binding = 0) buffer InIndexListLength    { uint inIndexListLength; };
layout(set =  5, binding = 0) buffer InOutNeighborsLength { uint inOutNeighborsLength; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	float mRangeScale;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	float range = inRange[id] * mRangeScale;
	uint idx = inIndexList[id];
	vec3 pos = vec3(inPosition[idx].xyz) / POS_RESOLUTION;

	uint neighborCount = 0;
	for (uint idN = 0; idN < inIndexListLength; idN++) {
		uint idxN = inIndexList[idN];
		vec3 posN = vec3(inPosition[idxN].xyz) / POS_RESOLUTION;
		if (id == idN || distance(pos, posN) > range) continue;

		uint i = atomicAdd(inOutNeighborsLength, 1u);
		if (i < outNeighbors.length()) {
			outNeighbors[i] = uvec2(idN, id);
		} else {
			inOutNeighborsLength = outNeighbors.length();
		}
	}
}
