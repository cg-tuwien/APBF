#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList    { uint       inIndexList[]; };
layout(set =  1, binding = 0) buffer InRadius       { float         inRadius[]; };
layout(set =  2, binding = 0) buffer InTargetRadius { float   inTargetRadius[]; };
layout(set =  3, binding = 0) buffer OutKernelWidth { uint    outKernelWidth[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  4, binding = 0) buffer InIndexListLength { uint inIndexListLength; };
// ----------------------------------------------------

// ------------------ apbf settings -------------------
layout(set =  5, binding = 0) uniform ApbfSettings { apbf_settings apbfSettings; };
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	uint  idx              = inIndexList[id];
	float radius           = inRadius[idx];
	float targetRadius     = inTargetRadius[id];

	if (!bool(apbfSettings.mBaseKernelWidthOnTargetRadius))  targetRadius = 0;

	float originalKernelWidth = max(radius, targetRadius) * KERNEL_SCALE;

	outKernelWidth[id] = uint(originalKernelWidth * KERNEL_WIDTH_RESOLUTION);
}
