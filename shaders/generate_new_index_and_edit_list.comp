#version 460
#extension GL_ARB_separate_shader_objects : enable
#define MAX_UINT 0xFFFFFFFF

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InEditList            { uint            inEditList[]; };
layout(set =  1, binding = 0) buffer InHiddenIdToIdxListId { uint inHiddenIdToIdxListId[]; };
layout(set =  2, binding = 0) buffer InIndexListEqualities { uint inIndexListEqualities[]; };
layout(set =  3, binding = 0) buffer OutNewIndexList       { uint       outNewIndexList[]; };
layout(set =  4, binding = 0) buffer OutNewEditList        { uint        outNewEditList[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  5, binding = 0) buffer InEditListLength { uint inEditListLength; };
layout(set =  6, binding = 0) buffer InOutNewLength   { uint inOutNewLength; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	uint mMaxNewLength;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;

	if (id >= inEditListLength) return;

	uint hId = inEditList[id];
	uint iId = inHiddenIdToIdxListId[hId];

	while (iId != MAX_UINT) {
		uint idx = atomicAdd(inOutNewLength, 1u);
		if (idx >= mMaxNewLength) {
			inOutNewLength = mMaxNewLength;
			return;
		}
		outNewIndexList[idx] = id;
		outNewEditList [idx] = iId;

		iId = inIndexListEqualities[iId];
	}
}
