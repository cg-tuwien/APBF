#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InIndexList    { uint     inIndexList[]; };
layout(set =  1, binding = 0) buffer OutPosition    { ivec4    outPosition[]; };
layout(set =  2, binding = 0) buffer OutVelocity    { vec4     outVelocity[]; };
layout(set =  3, binding = 0) buffer OutInverseMass { float outInverseMass[]; };
layout(set =  4, binding = 0) buffer OutRadius      { float      outRadius[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  5, binding = 0) buffer InIndexListLength { uint inIndexListLength; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	vec3 mMinPos;
	float mRadius;
	vec3 mVelocity;
	float mInverseMass;
	uvec3 mParticleCount;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;

	if (id >= inIndexListLength) return;

	uint idx = inIndexList[id];
	
	uvec3 gridPos;
	gridPos.x = id / (mParticleCount.z * mParticleCount.y);     id -= gridPos.x * mParticleCount.z * mParticleCount.y;
	gridPos.y = id / (mParticleCount.z                   );     id -= gridPos.y * mParticleCount.z;
	gridPos.z = id;

	vec3 pos = mMinPos + 2 * mRadius * gridPos;

	outPosition[idx].xyz = ivec3(pos * POS_RESOLUTION);
	outVelocity[idx].xyz = mVelocity;
	outInverseMass[idx] = mInverseMass;
	outRadius[idx] = mRadius;
}
