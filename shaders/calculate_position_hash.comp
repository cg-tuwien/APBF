#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set =  0, binding = 0) buffer InPosition { ivec4 inPosition[]; };
layout(set =  1, binding = 0) buffer OutHash    { uint     outHash[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set =  2, binding = 0) buffer InBufferLength { uint inPositionLength; };
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	vec3 mMinPos;
	uint mResolutionLog2;
	vec3 mMaxPos;
};
// ----------------------------------------------------

uvec3 map_pos_to_grid(ivec3 aPos) {
	vec3 pos = vec3(aPos) / POS_RESOLUTION;
	return uvec3((pos - mMinPos) / (mMaxPos - mMinPos) * (1u << mResolutionLog2));
}

// z-curve
uint hash(uvec3 pos) {
	uint result = 0u;
	for (uint i = 0u; i < mResolutionLog2; i++) for (uint d = 0u; d < DIMENSIONS; d++)
	{
		result += ((pos[d] >> i) & 1u) << (i * DIMENSIONS + d);
	}
	return result;
}

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;

	if (id >= inPositionLength) return;

	outHash[id] = hash(map_pos_to_grid(inPosition[id].xyz));
}
