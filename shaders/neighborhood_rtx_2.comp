#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_query : require
#include "cpu_gpu_shared_config.h"

// ---------------------- lists -----------------------
layout(set = 0, binding = 0) buffer InIndexList  { uint       inIndexList[]; };
layout(set = 0, binding = 1) buffer InPosition   { ivec4       inPosition[]; };
layout(set = 0, binding = 2) buffer InRange      { float          inRange[]; };
layout(set = 0, binding = 3) buffer OutNeighbors { uvec2     outNeighbors[]; };
// ----------------------------------------------------

// ------------------- list lengths -------------------
layout(set = 1, binding = 0) buffer InIndexListLength    { uint inIndexListLength; };
layout(set = 1, binding = 1) buffer InOutNeighborsLength { uint inOutNeighborsLength; };
// ----------------------------------------------------

// -------------- acceleration structure --------------
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
// ----------------------------------------------------

// ------------------ push constants ------------------
layout(push_constant) uniform PushConstants {
	float mRangeScale;
};
// ----------------------------------------------------

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint id = gl_GlobalInvocationID.x;
	if (id >= inIndexListLength) return;

	uint idx = inIndexList[id];
	vec3 pos = vec3(inPosition[idx].xyz) / POS_RESOLUTION;
	
	// Create a Ray Query and search for all the neighbors
	rayQueryEXT rayQuery;
	vec3 rayOrigin    = pos;
	vec3 rayDirection = vec3(0, 0, 1);
	float tMin        = 0.0;
	float tMax        = 0.01;
	rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, rayOrigin, tMin, rayDirection, tMax);

	while(rayQueryProceedEXT(rayQuery)) {
		uint idN     = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);
		uint idxN    = inIndexList[idN];
		vec3 posN    = vec3(inPosition[idxN].xyz) / POS_RESOLUTION;
		float rangeN = inRange[idN] * mRangeScale;
		if (id == idN || distance(pos, posN) > rangeN) continue;

		uint i = atomicAdd(inOutNeighborsLength, 1u);
		if (i < outNeighbors.length()) {
			outNeighbors[i] = uvec2(idN, id);
		} else {
			inOutNeighborsLength = outNeighbors.length();
		}
	}
}
